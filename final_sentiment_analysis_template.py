# -*- coding: utf-8 -*-
"""Final_Sentiment_Analysis_Template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18nQZuNRdv6ISEY1VTbNzdc6xZFddK-fN
"""

import h5py
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
import re
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
from keras.utils.np_utils import to_categorical
path = "*****PLACEHOLDER FOR COLABORATORY PATH*****"
data = pd.read_csv(path)
data = data[data.sentiment != "neutral"]
data = data[0:int(len(data)/2)]
print(data.columns)
data["review"] = data["review"].apply(lambda x: x.lower())
data["review"] = data["review"].apply(lambda x: re.sub('[^a-zA-z0-9\s]', "", x))


print("pos_size: {}".format(data[data["sentiment"] == "positive"].size))
print("neg_size: {}".format(data[data["sentiment"] == "negative"].size))

max_words = 20000
tokenizer = Tokenizer(num_words=max_words, split=" ")
tokenizer.fit_on_texts(data["review"].values)
X = tokenizer.texts_to_sequences(data["review"].values)
X = pad_sequences(X)
embed_dim = 128
lstm_out = 196
print(X)

model = Sequential()
model.add(Embedding(max_words, embed_dim, input_length=X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2, activation='softmax'))
model.compile(loss = "categorical_crossentropy", optimizer="adam", metrics = ["accuracy"])
print(model.summary())

y = pd.get_dummies(data['sentiment']).values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.6, random_state = 1)

batch_size = 1024
model.fit(X_train, y_train, epochs=7, batch_size=batch_size, verbose=2)

print(X_test.shape)
print(y_test.shape)

score, acc = model.evaluate(X_test, y_test, verbose=2, batch_size=batch_size)

print(score, acc)

pos_correct, neg_correct, pos_total, neg_total = (0,0,0,0)
y_pred = []
y_true = []
for i in range(len(X_test)):
  result = model.predict(X_test[i], batch_size=1, verbose=2)[0]
  y_pred.append(np.argmax(result))
  y_true.append(np.argmax(y_test[i]))
  if np.argmax(result) == np.argmax(y_test[i]):
    if np.argmax(y_test[i]) == 0: neg_correct += 1
    else: pos_correct += 1
  if np.argmax(y_test[i]) == 0: neg_total += 1
  else: pos_total += 1

print("pos_acc: {}".format(pos_correct/pos_total))
print("neg_acc: {}".format(neg_correct/neg_total))

from sklearn.metrics import confusion_matrix
print(y_pred)
print(y_true)
conf_matrix = confusion_matrix(y_true, y_pred)
print(conf_matrix)

import seaborn as sn
import matplotlib.pyplot as plt

array = conf_matrix

df_cm = pd.DataFrame(array, range(2), range(2))
sn.set(font_scale=1.4) 
sn.heatmap(df_cm, annot=True, annot_kws={"size": 15}) 

plt.show()

print(data)
print(data.values)